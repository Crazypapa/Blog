## 简单实例-anEchoServer

和 discard server 唯一不同的是把在此之前我们实现的 channelRead() 方法，返回所有的数，<br>
据替代打印接收数据到控制台上的逻辑。因此，需要把 channelRead() 方法修改如下：<br>

@Override<br>
public void channelRead(ChannelHandlerContext ctx, Object msg) {<br>
  ctx.write(msg); // (1)<br>
  ctx.flush(); // (2)<br>
}<br>
1. ChannelHandlerContext 对象提供了许多操作，使你能够触发各种各样的 I/O 事件和操作。这里我们调用了 write(Object) 方法来逐字地把接受到的消息写入。请注意不同于
DISCARD 的例子我们并没有释放接受到的消息，这是因为当写入的时候 Netty 已经帮我们释放了。<br>
2. ctx.write(Object) 方法不会使消息写入到通道上，他被缓冲在了内部，你需要调用ctx.flush() 方法来把缓冲区中数据强行输出。或者你可以用更简洁的
cxt.writeAndFlush(msg) 以达到同样的目的。<br>
